;; Functions

;;---------------------------------------------------------------------------------------------
;;Função simples
;;(defun f(x)
;;  (* x x ))

;;(f 4)
;;---------------------------------------------------------------------------------------------

;;---------------------------------------------------------------------------------------------
;;Função fatorial
;;(defun fact (x)
;;  (if (= x 0)
;;      1
;;    (* x (fact (- x 1)))))

;;(fact 4)

;;Cria a lista
;;(setq l '(1 2 3 4))
;;---------------------------------------------------------------------------------------------

;;---------------------------------------------------------------------------------------------
;;Define a função quadratica
;;(defun sqr (x) (* x x))

;;(sqr 2)
;;----------------------------------------------------------------------------------------------


;;----------------------------------------------------------------------------------------------
;;função para aplicar a função em toda a lista
;;(defun list-quad (l fcn)
;;  (and l
;;       (cons (funcall fcn (car l))
;;            (list-quad (cdr l) fcn ))))

;;(list-quad '(1 2 3 4 5) #'fact)
;;(list-quad '("abc" "de" "fghi") #'length)
;;-----------------------------------------------------------------------------------------------


;;-----------------------------------------------------------------------------------------------
;;Função LET do lisp
;;(let ((x 3)
;;      (y 2))
;;  (setq x 4)
;;  (message (format "x =%d" x))
;;  (* x y))
;;------------------------------------------------------------------------------------------------

;;------------------------------------------------------------------------------------------------
;;Função mostrando como fazer a documentation
;;(defun fx()
;;  "Documentação da função fx: ela retorna string 'ultimo'."
;;  "sempre"
;;  "retorna"
;;  "o"
;;  "ultimo")
;;(documentation #'fx)
;;------------------------------------------------------------------------------------------------

(progn
      (message "oi")
)
